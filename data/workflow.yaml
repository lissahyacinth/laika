correlation:
  eventA:
    key:
      "$.transaction_id"
  eventB:
    key: "$.txn_id"
  eventC:
    key: "$.transaction_id"

events:
  eventA:
    matchKey:
      type: "PaymentInitiated"
  eventB:
    matchKey:
     type: "PaymentAuthorized"
  eventC:
    matchKey:
     type: "PaymentSettled"

triggers:
  logCase:
    requires:
      exact:
        - eventA
    action:
      type: "httpPost"

  successCase:
    requires:
      exact:
        - eventA
        - eventB
        - eventC
    condition: >
      (trigger, ctx) => {
        const firstTime = ctx.sequence[0].time;
        const checkTime = ctx.events.eventC?.time ?? trigger.time;
        return duration(checkTime, firstTime) <= minutes(30);
      }
    action:
      type: "httpPost"

  errorCase:
    requires:
      atLeast:
        - eventA
        - eventB
    condition: >
      (trigger, ctx) => {
        const firstTime = ctx.sequence[0].time;
        const checkTime = ctx.events.eventC?.time ?? trigger.time;
        return duration(checkTime, firstTime) > minutes(30);
      }
    action:
      type: "createAlert"